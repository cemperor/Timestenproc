#include <stdlib.h>
#include <fcntl.h>
#include <locale.h>

#include <WINSOCK.H>
#include <windows.h>
#include <conio.h>

/* 包含OCI头文件*/
#include <oci.h>

/* 包含SQLCA头文件*/
#include <sqlca.h>
#include <sqlcpr.h>

#include  "common.h"
#include  "mqcmn.h"
#include  "dbcmn.h"
#include "declare.h"
#include "data_analysis.h"
#include "data_insert.h"
#pragma comment (lib, "mqm.lib")

//#ifdef UNIX_LINUX_SYS
//#include <termios.h>
//#include <sys/dir.h>
//#include <sys/unistd.h>
//#include <sys/socket.h>
//#include <netinet/in.h>
//#include<sys/resource.h>
//#else
//
//#include <WINSOCK.H>
//#include <windows.h>
//#include <conio.h>

//#endif





#define CHECKNUM 100 /*校验数据库连接状态用*/

#define CHECKTIME 15 /*更新最新机车状态表用 单位：秒*/

#define CHECKTIME_Boundary (15*60) /*更新最新机车状态表用 单位：秒*/

#define JUDGETIME (5*60)  /*判断机车离线用 单位：秒*/

#define ONE_HOUR_TIME (60*60)  /*判断机车失效用 单位：秒*/

char cmd_sub_routine[30];/*存放CMD子进程名称*/

int precheck_hh=-1;

int precheck_dd=-1;

int checknum = 0;

void creatPersonNode(c_pmap thiz,int tempkey,person_stu* tempstu)/*创建新的司机节点*/
{

	pperson_stu pstu = NULL;

	c_pair	 *pair = NULL;

	int		 *key  = NULL;

	key =(int*)__c_malloc(sizeof(int)); 

	pair = (c_pair*)__c_malloc(sizeof(c_pair));

	pstu = (person_stu*)__c_malloc(sizeof(person_stu));

	

	*key = tempkey;

	memcpy(pstu,tempstu,sizeof(person_stu));

	pair->first = key;

	pair->second = pstu;

	c_map_insert (thiz,pair);

}



void creatTCMSFaultNode(c_pmap thiz,int tempkey,tcmsfault_stu* tempstu)/*创建新的TCMS故障节点*/

{

	ptcmsfault_stu pstu = NULL;

	c_pair	 *pair = NULL;

	int		 *key  = NULL;

	key =(int*)__c_malloc(sizeof(int)); 

	pair = (c_pair*)__c_malloc(sizeof(c_pair));

	pstu = (tcmsfault_stu*)__c_malloc(sizeof(tcmsfault_stu));

	

	*key = tempkey;

	memcpy(pstu,tempstu,sizeof(tcmsfault_stu));

	pair->first = key;

	pair->second = pstu;

	c_map_insert (thiz,pair);

}



/*add by guo 20160406*/

void creatBoundaryNode(c_pmap thiz,int tempkey,boundary_cur* tempstu)/*创建新的局界节点*/

{

    pboundary_cur pstu = NULL;

    c_pair	 *pair = NULL;

    int		 *key  = NULL;

    key =(int*)__c_malloc(sizeof(int));

    pair = (c_pair*)__c_malloc(sizeof(c_pair));

    pstu = (boundary_cur*)__c_malloc(sizeof(boundary_cur));



    *key = tempkey;

    memcpy(pstu,tempstu,sizeof(boundary_cur));

    pair->first = key;

    pair->second = pstu;

    c_map_insert (thiz,pair);

}



void creat6AFaultNode(c_pmap thiz,int tempkey,_6afault_stu* tempstu)/*创建新的LDP故障节点*/

{

	p_6afault_stu pstu = NULL;

	c_pair	 *pair = NULL;

	int		 *key  = NULL;

	key =(int*)__c_malloc(sizeof(int)); 

	pair = (c_pair*)__c_malloc(sizeof(c_pair));

	pstu = (_6afault_stu*)__c_malloc(sizeof(_6afault_stu));

	

	*key = tempkey;

	memcpy(pstu,tempstu,sizeof(_6afault_stu));

	pair->first = key;

	pair->second = pstu;

	c_map_insert (thiz,pair);

}



void creatLDPFaultNode(c_pmap thiz,int tempkey,ldpfault_stu* tempstu)/*创建新的TCMS故障节点*/

{

	pldpfault_stu pstu = NULL;

	c_pair	 *pair = NULL;

	int		 *key  = NULL;

	key =(int*)__c_malloc(sizeof(int)); 

	pair = (c_pair*)__c_malloc(sizeof(c_pair));

	pstu = (ldpfault_stu*)__c_malloc(sizeof(ldpfault_stu));

	

	*key = tempkey;

	memcpy(pstu,tempstu,sizeof(ldpfault_stu));

	pair->first = key;

	pair->second = pstu;

	c_map_insert (thiz,pair);

}







void creatTraininfoNode(c_pmap thiz,int tempkey,traininfo_stu* tempstu)/*创建新的TCMS故障节点*/

{

	ptraininfo_stu pstu = NULL;

	c_pair	 *pair = NULL;

	int		 *key  = NULL;

	key =(int*)__c_malloc(sizeof(int)); 

	pair = (c_pair*)__c_malloc(sizeof(c_pair));

	pstu = (traininfo_stu*)__c_malloc(sizeof(traininfo_stu));

	

	*key = tempkey;

	memcpy(pstu,tempstu,sizeof(traininfo_stu));

	pair->first = key;

	pair->second = pstu;

	c_map_insert (thiz,pair);

}



void creatLkjevnetNode(c_pmap thiz,int tempkey,lkjevent_stu* tempstu)/*创建新的TCMS故障节点*/

{

	plkjevent_stu pstu = NULL;

	c_pair	 *pair = NULL;

	int		 *key  = NULL;

	key =(int*)__c_malloc(sizeof(int)); 

	pair = (c_pair*)__c_malloc(sizeof(c_pair));

	pstu = (lkjevent_stu*)__c_malloc(sizeof(lkjevent_stu));

	

	*key = tempkey;

	memcpy(pstu,tempstu,sizeof(lkjevent_stu));

	pair->first = key;

	pair->second = pstu;

	c_map_insert (thiz,pair);

}





void creatLineinfoNode(c_pmap thiz,int tempkey,lineinfo_stu* tempstu)/*创建新的TCMS故障节点*/

{

	plineinfo_stu pstu = NULL;

	c_pair	 *pair = NULL;

	int		 *key  = NULL;

	key =(int*)__c_malloc(sizeof(int)); 

	pair = (c_pair*)__c_malloc(sizeof(c_pair));

	pstu = (lineinfo_stu*)__c_malloc(sizeof(lineinfo_stu));

	

	*key = tempkey;

	memcpy(pstu,tempstu,sizeof(lineinfo_stu));

	pair->first = key;

	pair->second = pstu;

	c_map_insert (thiz,pair);

}



/*Map容器内联函数*/

static inline int int_comparer(void * x, void * y)

{

    return *(int *)(x) - *(int *)(y);

}



void getboundaryInfo()

{

    int key;

    int chex,cheh;

    int num = 0;

    char tmp[256] = {0x00};

    /*add by guo 20160406*/

    boundary_cur boundaryinfo;



    EXEC SQL WHENEVER SQLERROR CONTINUE;

EXEC SQL DECLARE boundary_cursor_temp CURSOR FOR SELECT

        idx,                /*CHAR(32),*/

         trim(t_type_id),          /*CHAR(3),*/

         trim(loco_no),            /*CHAR(4),*/

         cc,                 /*VARCHAR2(10),*/

         driverno,           /*NUMBER(7),*/

         trim(drivername),         /*VARCHAR2(20),*/

         to_char(nvl(pass_boundary_time,to_date('2000-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')),'yyyy-mm-dd hh24:mi:ss'),

         to_char(nvl(update_time,to_date('2000-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')),'yyyy-mm-dd hh24:mi:ss'),

        /*pass_boundary_time, LKJ DATE,*/

        /*update_time,        DATE,*/

         trim(last_bid),           /*CHAR(2),*/

         trim(next_bid),           /*CHAR(2),*/

         sjsd,               /*NUMBER(8,2),*/

         tmis_station_no,    /*NUMBER(5),*/

         trim(tmis_station_name)  /*VARCHAR2(32)*/

         FROM ap_train_cur_boundary;

        EXEC SQL OPEN boundary_cursor_temp;

        while(1)

        {

            EXEC SQL FETCH boundary_cursor_temp into

                    :boundaryinfo.idx,                /*CHAR(32),*/

                    :boundaryinfo.t_type_id,          /*CHAR(3),*/

                    :boundaryinfo.loco_no,            /*CHAR(4),*/

                    :boundaryinfo.cc,                 /*VARCHAR2(10),*/

                    :boundaryinfo.driverno,           /*NUMBER(7),*/

                    :boundaryinfo.drivername,         /*VARCHAR2(20),*/

                    :boundaryinfo.pass_boundary_time, /*LKJ DATE,*/

                    :boundaryinfo.update_time,        /*DATE,*/

                    :boundaryinfo.last_bid,           /*CHAR(2),*/

                    :boundaryinfo.next_bid,           /*CHAR(2),*/

                    :boundaryinfo.sjsd,               /*NUMBER(8,2),*/

                    :boundaryinfo.tmis_station_no,    /*NUMBER(5),*/

                    :boundaryinfo.tmis_station_name;  /*VARCHAR2(32)*/



            if(sqlca.sqlcode == 0)

            {

                chex = atoi(boundaryinfo.t_type_id);

                cheh = atoi(boundaryinfo.loco_no);

                //key = ((chex<<16)&0xffff0000) + cheh;

                key = ((chex<<16)&0xc0ff0000) + (cheh&0x3FFF);

                creatBoundaryNode(&boundary_map, key,&boundaryinfo);

            }

            else

            {

                break;

            }

        }



    num = c_map_size(&boundary_map);



    sprintf(tmp, "getboundaryInfo 局界历史数据总计存入数目：%d\n", num);

    #ifdef UNIX_LINUX_DEBUG

    //printf("%s", tmp);

    #endif

}



void getbasicInfo()

{

	int key;

	int chex,cheh,ab;

	int num = 0;

    char tmp[256] = {0x00};

	

	person_stu peson;//司机信息map用

	//pperson_stu pperson;

	

	tcmsfault_stu tcmsfault;//TCMS故障mapV10协议

	//ptcmsfault_stu ptcmsfault; 

	

	_6afault_stu  _6afault;

	//p_6afault_stu p_6afault;

	

	ldpfault_stu  ldpfault;

	//pldpfault_stu pldpfault;

	

	lkjevent_stu  lkjevent;

//	plkjevent_stu plkjevent;



	traininfo_stu  traininfo;

    //ptraininfo_stu ptraininfo;

	

	lineinfo_stu   lineinfo;

    //plineinfo_stu  plineinfo;




	EXEC SQL WHENEVER SQLERROR CONTINUE;

	EXEC SQL DECLARE traininfo_cursor CURSOR FOR SELECT 

			IDX,

			T_TYPE_ID,

			LOCO_NO,

			AB,

			DRIVERBID,

			DRIVERBSNAME,

			DRIVERBFNAME,

			DRIVERDID,

			DRIVERDSNAME,

			DRIVERDFNAME,

			B_ID,

			BSHORTNAME,

			BFULLNAME,

			D_ID,

			DSHORTNAME,

			DFULLNAME,

			T_TYPE_NAME,

			T_TYPE_F_NAME,

			EQUIPFACTORY,

			IDX_3G,

			IDX_BD,

			to_char(nvl(LASTTIME3G,to_date('2000-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')),'yyyy-mm-dd hh24:mi:ss'),

			to_char(nvl(LASTTIMEBD,to_date('2000-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')),'yyyy-mm-dd hh24:mi:ss'),

			/*to_char(LASTTIME3G,'yyyy-mm-dd hh24:mi:ss'),

			to_char(LASTTIMEBD,'yyyy-mm-dd hh24:mi:ss'),*/

			STATUS3G,

			STATUSBD,

			CROSSROADNO,

			STATIONNO,

			STATIONNAME,

			TIMSSTATIONNO,

			TIMSSTATIONNAME,

			LINENO,

			LINENAME,

			DRIVERNO,

			DRIVERNAME,

			DRIVERTEL,

			JD,

			WD,

			HB,

			BTSD,

			KHBB,

			ZZ,

			JC,

			GLB,

			LS,

			CC,

			PROVER6A,

			PROVERTCMS,

			PROVERLKJ,

			BDJD,

			BDWD,

			BDHB,

			BDSD,

			LKJSD,

			LKJVER,

			CUR_B_ID,

			FDRIVERNO,

			FDRIVERNAME,

			FDRIVERTEL ,

			LDPSTATUS,

			/*to_char(LASTTIME,'yyyy-mm-dd hh24:mi:ss') FROM VIEW_LDPLISTFORPARSE*/

			to_char(nvl(LASTTIME,to_date('2000-01-01 00:00:01','yyyy-mm-dd hh24:mi:ss')),'yyyy-mm-dd hh24:mi:ss') ,

			to_char(nvl(LASTTIMEBDCT,to_date('2000-01-01 00:00:01','yyyy-mm-dd hh24:mi:ss')),'yyyy-mm-dd hh24:mi:ss') ,

            to_char(nvl(LASTTIMEBDNBGD,to_date('2000-01-01 00:00:01','yyyy-mm-dd hh24:mi:ss')),'yyyy-mm-dd hh24:mi:ss'),

            LKJ_DATA_VER,

            LKJ_SOFT_VER,

            LDP_CPU_VER,

            LDP_WXTX_VER,

            FHJLQ_VER,

            WLJKB_VER,

            TCMS_VER1,

            TCMS_VER2,

            TCMS_VER3,

            TCMS_VER4,

            SIXA_CPUVER,

            B_BOUNDARY_NAME,

            TMIS_STATION_NO,

            to_char(nvl(PASS_BOUNDARY_TIME,to_date('2000-01-01 00:00:01','yyyy-mm-dd hh24:mi:ss')),'yyyy-mm-dd hh24:mi:ss'),

            CUR_BID ,

            PROVERSELFCHECK,

            COMP FROM VIEW_LDPLISTFORPARSE;

	EXEC SQL OPEN traininfo_cursor;

	while(1)

	{

		EXEC SQL FETCH traininfo_cursor INTO 

			:traininfo.IDX,

			:traininfo.T_TYPE_ID,

			:traininfo.LOCO_NO,

			:traininfo.AB,

		    :traininfo.DRIVERBID,

			:traininfo.DRIVERBSNAME,

			:traininfo.DRIVERBFNAME,

			:traininfo.DRIVERDID,

			:traininfo.DRIVERDSNAME,

			:traininfo.DRIVERDFNAME,

			:traininfo.B_ID,

			:traininfo.BSHORTNAME,

			:traininfo.BFULLNAME,

			:traininfo.D_ID,

			:traininfo.DSHORTNAME,

			:traininfo.DFULLNAME,

			:traininfo.T_TYPE_NAME,

			:traininfo.T_TYPE_F_NAME,

			:traininfo.EQUIPFACTORY,

			:traininfo.IDX_3G,

			:traininfo.IDX_BD,

			:traininfo.LASTTIME3G,

			:traininfo.LASTTIMEBD,

			:traininfo.STATUS3G,

			:traininfo.STATUSBD,

			:traininfo.CROSSROADNO,

			:traininfo.STATIONNO,

			:traininfo.STATIONNAME,

			:traininfo.TIMSSTATIONNO,

			:traininfo.TIMSSTATIONNAME,

			:traininfo.LINENO,

			:traininfo.LINENAME,

			:traininfo.DRIVERNO,

			:traininfo.DRIVERNAME,

			:traininfo.DRIVERTEL,

			:traininfo.JD,

			:traininfo.WD,

			:traininfo.HB,

			:traininfo.BTSD,

			:traininfo.KHBB,

			:traininfo.ZZ,

			:traininfo.JC,

			:traininfo.GLB,

			:traininfo.LS,

			:traininfo.CC,

			:traininfo.PROVER6A,

			:traininfo.PROVERTCMS,

			:traininfo.PROVERLKJ,

			:traininfo.BDJD,

			:traininfo.BDWD,

			:traininfo.BDHB,

			:traininfo.BDSD,

			:traininfo.LKJSD,

			:traininfo.LKJVER,

			:traininfo.CUR_B_ID,

			:traininfo.FDRIVERNO ,

			:traininfo.FDRIVERNAME ,

			:traininfo.FDRIVERTEL,

			:traininfo.LDPSTATUS,

			:traininfo.LASTTIME,

			:traininfo.LASTTIMEBDCT,

            :traininfo.LASTTIMEBDNBGD,

            :traininfo.LKJ_DATA_VER,

             :traininfo.LKJ_SOFT_VER,

             :traininfo.LDP_CPU_VER,

             :traininfo.LDP_WXTX_VER,

             :traininfo.FHJLQ_VER,

             :traininfo.WLJKB_VER,

             :traininfo.TCMS_VER1,

             :traininfo.TCMS_VER2,

             :traininfo.TCMS_VER3,

             :traininfo.TCMS_VER4,

             :traininfo.SIXA_CPUVER,

             :traininfo.B_BOUNDARY_NAME,

             :traininfo.TMIS_STATION_NO,

             :traininfo.PASS_BOUNDARY_TIME,

             :traininfo.CUR_BID,

             :traininfo.PROVERSELFCHECK,

             :traininfo.COMP;

	

		if(sqlca.sqlcode == 0)

		{

			//EXEC SQL COMMIT;

			chex = atoi(traininfo.T_TYPE_ID);

			cheh = atoi(traininfo.LOCO_NO);

			ab   = traininfo.AB;

			if (ab == 1)

			{

			  	key = (((chex|0x8000)<<16)&0xffff0000) +cheh;

			} 

			else if (ab == 2)

			{

				key = (((chex|0x4000)<<16)&0xffff0000) +cheh;

			}

			else

			{

				key = ((chex<<16)&0xffff0000) + cheh;

			}

			

			//if((chex==237)&&(cheh==597))

			//{

			//	printf("key=%d\n",key);

			//}

			trainkey.num += 1;

			trainkey.key[i] = key;

			trainkey.traintype[i] = chex;

			traininfo.UNIXTIME3G = getUnixTime(traininfo.LASTTIME3G);

			traininfo.UNIXTIMEBD = getUnixTime(traininfo.LASTTIMEBD);

            traininfo.UNIXTIMELAST = getUnixTime(traininfo.LASTTIME);

			

			creatTraininfoNode(&traininfo_map, key,&traininfo);

			//printf("LASTTIME3G = %s,LASTTIMEBD=%s,LASTTIME=%s\n",traininfo.LASTTIME3G,

			//traininfo.LASTTIMEBD,traininfo.LASTTIME);

			//printf("%s-%s,车型=%d\n",traininfo.T_TYPE_ID,traininfo.LOCO_NO,trainkey.traintype[i]);

			//printf("UNIXTIME3G=%d,UNIXTIMEBD=%d,\n",

			//       key,traininfo.UNIXTIME3G,traininfo.UNIXTIMEBD,traininfo.T_TYPE_ID,traininfo.LOCO_NO);

			i++;

		}

		else

		{

            sprintf(tmp, "注册机车数ORACLE返回值：%d\n",sqlca.sqlcode);

            cclog('e', tmp);



			break;

		}

	}



	num = c_map_size(&traininfo_map);

    sprintf(tmp, "注册机车数目：%d  trainkey.num = %d\n", num, trainkey.num);

#ifdef UNIX_LINUX_DEBUG

    //printf("%s", tmp);

#endif



    cclog('i', tmp);



	EXEC SQL CLOSE traininfo_cursor;	

	

	

	EXEC SQL WHENEVER SQLERROR CONTINUE;

	EXEC SQL DECLARE person_cursor CURSOR FOR SELECT WORKID,BID,BSNAME,BFNAME,DID,DSNAME,DFNAME,HNAME,MOBILENUMBER FROM view_persons;

	EXEC SQL OPEN person_cursor;

	

	while(1)

	{

		EXEC SQL FETCH person_cursor INTO 

		:key ,

		:peson.B_ID,

		:peson.BSNAME,

		:peson.BFNAME,

		:peson.D_ID,

		:peson.DSNAME,

		:peson.DFNAME,

		:peson.NAME,

		:peson.MOBILENUMBER;

		if(sqlca.sqlcode == 0)

		{

			//EXEC SQL COMMIT;

			creatPersonNode(&person_map, key,&peson);

		}

		else 

		{

            sprintf(tmp, "fetch cursor person_cursor fail,sqlcode=%ld,sqlserr=%s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);

            cclog('e', tmp);

			break;

		}

	}	

	EXEC SQL CLOSE person_cursor;

	num = c_map_size(&person_map);

    sprintf(tmp, "总计存入司机数目：%d\n", num);

    cclog('i', tmp);

		
	

	EXEC SQL WHENEVER SQLERROR CONTINUE;

	EXEC SQL DECLARE lineinfo_cursor CURSOR FOR SELECT 

		B_ID,

		CROSS_ROAD_NO,

		TRAIN_STATION_NO, 

		TMIS_STATION_NO,

		TRAIN_STATION_NAME,

		TMIS_STATION_NAME,

		TRAIN_LINE_NO,

		TRAIN_LINE_NAME,

        STATION_B_ID,

        ISBOUNDARY,

        SSJ,

        LJ FROM  VIEW_TRAINSTATIONS;/*edit by guo 20160607 view_trainstations-->view_trainstation_boundary*/

	EXEC SQL OPEN lineinfo_cursor;

	while(1)

	{

		EXEC SQL FETCH lineinfo_cursor INTO

		    :lineinfo.B_ID,

			:lineinfo.CROSS_ROAD_NO,

			:lineinfo.TRAIN_STATION_NO,

			:lineinfo.TMIS_STATION_NO,

			:lineinfo.TRAIN_STATION_NAME,

			:lineinfo.TMIS_STATION_NAME,

			:lineinfo.TRAIN_LINE_NO,

			:lineinfo.TRAIN_LINE_NAME,

            :lineinfo.STATION_B_ID,

            :lineinfo.ISBOUNDARY,

            :lineinfo.SSJ,

            :lineinfo.LJ;

		

		if(sqlca.sqlcode == 0)

		{

			chex = atoi(lineinfo.B_ID);

			key  = ((chex &0x000000ff)<<24) 

				+ ((lineinfo.CROSS_ROAD_NO &0x000000ff)<<16)

				+lineinfo.TRAIN_STATION_NO;

			creatLineinfoNode(&lineinfo_map, key,&lineinfo);

		//	printf("key:%d,B_ID =%s,CROSS_ROAD_NO=%d,TRAIN_STATION_NO=%d\n",key,lineinfo.B_ID,lineinfo.CROSS_ROAD_NO,

		//	lineinfo.TRAIN_STATION_NO);



		}

		else

		{

            cclog('e', "fetch cursor lineinfo_cursor fail\n");

			break;

		}

	}

	num = c_map_size(&lineinfo_map);

    sprintf(tmp, "线路信息存入数目：%d\n",num);

    cclog('i', tmp);



	EXEC SQL CLOSE lineinfo_cursor;

    printf(tmp, "线路信息存入数目：%d\n",num);

    //getboundaryInfo();

}



void exithook(void)

{

    oradisConnect();

    printf("程序结束，释放对应资源\n");

}



void thread_conncheck()

{

	char temp[100];

	int yy,MM,dd,hh,mm,ss;

	int nowcheck_hh=0;

	int nowcheck_dd =0;

	getDateTime(&yy, &MM, &dd, &hh, &mm, &ss);

	nowcheck_hh = hh;

	nowcheck_dd = dd;

	

	if(precheck_hh == -1)

	{

		precheck_hh = nowcheck_hh;

	}

	else

	{

     	if(precheck_hh != nowcheck_hh)

		{

			EXEC SQL 

			SELECT 1 FROM DUAL;

			if (sqlca.sqlcode == 0)

			{

				EXEC SQL COMMIT;

				memset(temp,0,sizeof(temp));

                sprintf(temp,"连接测试：%d-%2d-%2d hh时，数据库连接无异常\n",yy,MM,dd,hh);

				cclog('e',temp);

			}

			else

			{

				init_oracle(sub_routine,configfile);

				memset(temp,0,sizeof(temp));

                sprintf(temp,"连接测试：%d-%2d-%2d hh时，数据库异常，重新连接数据库\n",yy,MM,dd,hh);

				cclog('e',temp);

			}	

		}

		precheck_hh = nowcheck_hh;		

	}

	

	if(precheck_dd == -1)

	{

		precheck_dd = nowcheck_dd;

	}

	else

	{

     	if(precheck_dd != nowcheck_dd)

		{

			c_map_clear(&person_map);

			c_map_clear(&installtrain_map);

			c_map_clear(&tcmsfault_map);

			c_map_clear(&tcmsfault_map_v2);

			c_map_clear(&_6afault_map);

			c_map_clear(&traininfo_map);

			c_map_clear(&lkjenvent_map);

			c_map_clear(&lineinfo_map);

			c_map_clear(&ldpfault_map);

            c_map_clear(&boundary_map);

     //       c_map_clear(&boundary_map);



			getbasicInfo(); 

			precheck_dd = nowcheck_dd;

		}	

	}

}



void insert3GHandle(){

	int i;

	lprintf(disp.g,"3G入库数目为：%d\n",gloab_3g_usednum);

	for (i=0;i<gloab_3g_usednum;i++)

	{

		insert_3G(gloab_3g[i]);	

	}	

	gloab_3g_usednum = 0;

}



void insertBDHandle(){

	int i;

	lprintf(disp.b,"北斗入库数目为：%d\n",gloab_bd_usednum);

	for (i=0;i<gloab_bd_usednum;i++)

	{

		insert_BD(gloab_bd[i]);

	}

	gloab_bd_usednum = 0;

}



void insertFAULTHandle()

{

	int i;

	lprintf(disp.f,"故障入库数目为：%d\n",gloab_fault_usednum);

	for (i=0;i<gloab_fault_usednum;i++)

	{

		insert_FAULT(gloab_fault[i]);								   

	}	 

	gloab_fault_usednum = 0;	

}



void insertEVENTHandle()

{

	int i;	

	lprintf(disp.v,"事件入库数目为：%d\n",gloab_event_usednum);

	for (i=0;i<gloab_event_usednum;i++)

	{

		insert_EVENT(gloab_event[i]);

	}

    gloab_event_usednum = 0;

}



void updateTrainStatus()

{

	char temp[1024];

    char temp2[2048];

	int num =0;

    int yy,mm,dd,hh,mi,ss;

	int flag = 0;

	int i,j;

	time_t curtime;

    time_t tmptime;

	ptraininfo_stu ptraininfo = NULL;



	curtime = time(NULL);

    for(i = 0; i < trainkey.num; i ++)

	{

        ptraininfo = (traininfo_stu*)c_map_at(&traininfo_map, &trainkey.key[i]);

        if(NULL != ptraininfo)

		{			

			flag = 0;

            for(j = 0; j < updatetraintype.num; j ++)

			{

				if(trainkey.traintype[i] == updatetraintype.traintype[j])

				{

					flag = 1;

					break;

				}

			}



            if(1 == flag)

			{

                tmptime = curtime - ptraininfo->UNIXTIME3G;

                if(tmptime > JUDGETIME)

				{

					ptraininfo->STATUS3G = 0; 

				}



                tmptime = curtime - ptraininfo->UNIXTIMEBD;

                if(tmptime > JUDGETIME)

				{

					ptraininfo->STATUSBD = 0; 

				}

#if 1

                if(2 == ptraininfo->STATUSBD)

                {

                    ptraininfo->STATUS3G = 0;

                    ptraininfo->LDPSTATUS = 2;

                } else

                {

                    if((0 == ptraininfo->STATUS3G) && (0 == ptraininfo->STATUSBD))

                    {

                        tmptime = curtime - ptraininfo->UNIXTIMELAST;

                        if(tmptime <= JUDGETIME)

                        {

                            ptraininfo->LDPSTATUS = 1;

                        } else if((tmptime > JUDGETIME) && (tmptime <= ONE_HOUR_TIME))

                        {

                            ptraininfo->LDPSTATUS = 3;

                        } else

                        {

                            ptraininfo->LDPSTATUS = 4;

                        }

                    } else

                    {

                        ptraininfo->LDPSTATUS = 1;

                    }

                }

#else				

#endif



                EXEC SQL WHENEVER SQLERROR CONTINUE;

				EXEC SQL 

				UPDATE AP_TRAIN_LASTSTATUS

				SET   IDX_BD          = :ptraininfo->IDX_BD,

					IDX_3G          = :ptraininfo->IDX_3G,

					LASTTIME3G      = to_date(:ptraininfo->LASTTIME3G ,'yyyy-mm-dd hh24:mi:ss'),

					LASTTIMEBD      = to_date(:ptraininfo->LASTTIMEBD ,'yyyy-mm-dd hh24:mi:ss'),

					CROSSROADNO     = :ptraininfo->CROSSROADNO     ,

					STATIONNAME     = trim(:ptraininfo->STATIONNAME)     ,

					STATIONNO       = :ptraininfo->STATIONNO       ,

					TIMSSTATIONNO   = :ptraininfo->TIMSSTATIONNO     ,

					TIMSSTATIONNAME = trim(:ptraininfo->TIMSSTATIONNAME)     ,

					LINENO          = :ptraininfo->LINENO     ,

					LINENAME        = trim(:ptraininfo->LINENAME)     ,

					DRIVERNO        = :ptraininfo->DRIVERNO     ,

					DRIVERNAME      = trim(:ptraininfo->DRIVERNAME)  ,   

					STATUSBD        = :ptraininfo->STATUSBD     ,

					STATUS3G        = :ptraininfo->STATUS3G     ,

					CC              = trim(:ptraininfo->CC)     ,

					JD              = :ptraininfo->JD     ,

					WD              = :ptraininfo->WD     ,

                    HB              = :ptraininfo->HB     ,

					BTSD            = :ptraininfo->BTSD     ,

					KHBB            = :ptraininfo->KHBB     ,

					ZZ              = :ptraininfo->ZZ     ,

					JC              = :ptraininfo->JC     ,

					GLB             = :ptraininfo->GLB     ,

					LS              = :ptraininfo->LS     ,

					PROVER6A        = :ptraininfo->PROVER6A     ,

					PROVERTCMS      = :ptraininfo->PROVERTCMS     ,

					PROVERLKJ       = :ptraininfo->PROVERLKJ     ,

					DRIVERBID       = trim(:ptraininfo->DRIVERBID) ,   

					BDJD            = :ptraininfo->BDJD     ,

					BDWD            = :ptraininfo->BDWD     ,

                    BDHB            = :ptraininfo->BDHB     ,

					BDSD            = :ptraininfo->BDSD     ,

					DRIVERTEL       = trim(:ptraininfo->DRIVERTEL)     ,

					LKJSD           = :ptraininfo->LKJSD     ,

					DRIVERDID       = trim(:ptraininfo->DRIVERDID)     ,

					LKJVER          = trim(:ptraininfo->LKJVER)  ,

					FDRIVERNO		= :ptraininfo->FDRIVERNO ,

					FDRIVERNAME		= trim(:ptraininfo->FDRIVERNAME) ,

					FDRIVERTEL		= trim(:ptraininfo->FDRIVERTEL),

					LDPSTATUS		= :ptraininfo->LDPSTATUS,

					LASTTIME		= to_date(:ptraininfo->LASTTIME ,'yyyy-mm-dd hh24:mi:ss'),

					LASTTIMEBDCT	= to_date(:ptraininfo->LASTTIMEBDCT ,'yyyy-mm-dd hh24:mi:ss'),

                    LASTTIMEBDNBGD	= to_date(:ptraininfo->LASTTIMEBDNBGD ,'yyyy-mm-dd hh24:mi:ss'),

                    LKJ_DATA_VER    = trim(:ptraininfo->LKJ_DATA_VER),

                    LKJ_SOFT_VER    = trim(:ptraininfo->LKJ_SOFT_VER),

                    LDP_CPU_VER     = :ptraininfo->LDP_CPU_VER,

                    LDP_WXTX_VER    = :ptraininfo->LDP_WXTX_VER,

                    FHJLQ_VER       = :ptraininfo->FHJLQ_VER,

                    WLJKB_VER       = :ptraininfo->WLJKB_VER,

                    TCMS_VER1       = :ptraininfo->TCMS_VER1,

                    TCMS_VER2       = :ptraininfo->TCMS_VER2,

                    TCMS_VER3       = :ptraininfo->TCMS_VER3,

                    TCMS_VER4       = :ptraininfo->TCMS_VER4,

                    SIXA_CPUVER     = :ptraininfo->SIXA_CPUVER,

                    B_BOUNDARY_NAME = trim(:ptraininfo->B_BOUNDARY_NAME),

                    TMIS_STATION_NO = :ptraininfo->TMIS_STATION_NO,

                    PASS_BOUNDARY_TIME = to_date(:ptraininfo->PASS_BOUNDARY_TIME ,'yyyy-mm-dd hh24:mi:ss'),

                    CUR_BID         = trim(:ptraininfo->CUR_BID),

                    PROVERSELFCHECK = :ptraininfo->PROVERSELFCHECK,

                    COMP            = :ptraininfo->COMP

                    WHERE IDX = :ptraininfo->IDX;

					if (sqlca.sqlcode != 0)

					{

                        printf("更新TRAINLASTSTATUS表失败%s-%s,ORACLE返回值：%d\n",ptraininfo->T_TYPE_ID,ptraininfo->LOCO_NO,sqlca.sqlcode);

						memset(temp,0,1024);

                        sprintf(temp,"更新TRAINLASTSTATUS表失败%s-%s,ORACLE返回值：%d\n",ptraininfo->T_TYPE_ID,ptraininfo->LOCO_NO,sqlca.sqlcode);

                        //sprintf(temp,"更新TRAINLASTSTATUS表失败,ORACLE返回值：%d\n",sqlca.sqlcode);

						lprintf(disp.e,temp);

						cclog('e',temp);





                        memset(temp2,0,1024);

                        sprintf(temp2,"CROSSROADNO=%d,STATIONNO=%d,TIMSSTATIONNO=%d,LINENO=%d,DRIVERNO=%d,STATUSBD=%d,STATUS3G=%d,JD=%f,WD=%f,HB=%f,BTSD=%f,KHBB=%d,ZZ=%d,GLB=%d,LS=%d,PROVER6A=%d,PROVERTCMS=%d,PROVERLKJ=%d,BDJD=%f,BDWD=%f,BDHB=%f,BDSD=%f,LKJSD=%f,FDRIVERNO=%d,LDPSTATUS=%d,LDP_CPU_VER=%f,LDP_WXTX_VER=%f,FHJLQ_VER=%f,WLJKB_VER=%f,TCMS_VER1=%d,TCMS_VER2=%d,TCMS_VER3=%d,TCMS_VER4=%d,SIXA_CPUVER=%f,JC=%f,TMIS_STATION_NO=%d,PROVERSELFCHECK=%d,COMP=%d,LKJ_TYPE=%d,CRK=%d\n",

                                ptraininfo->CROSSROADNO,

                                ptraininfo->STATIONNO,

                                ptraininfo->TIMSSTATIONNO,

                                ptraininfo->LINENO,

                                ptraininfo->DRIVERNO,

                                ptraininfo->STATUSBD,

                                ptraininfo->STATUS3G,

                                ptraininfo->JD,

                                ptraininfo->WD,

                                ptraininfo->HB,

                                ptraininfo->BTSD,

                                ptraininfo->KHBB,

                                ptraininfo->ZZ,

                                ptraininfo->GLB,

                                ptraininfo->LS,

                                ptraininfo->PROVER6A,

                                ptraininfo->PROVERTCMS,

                                ptraininfo->PROVERLKJ,

                                ptraininfo->BDJD,

                                ptraininfo->BDWD,

                                ptraininfo->BDHB,

                                ptraininfo->BDSD,

                                ptraininfo->LKJSD,

                                ptraininfo->FDRIVERNO,

                                ptraininfo->LDPSTATUS,

                                ptraininfo->LDP_CPU_VER,

                                ptraininfo->LDP_WXTX_VER,

                                ptraininfo->FHJLQ_VER,

                                ptraininfo->WLJKB_VER,

                                ptraininfo->TCMS_VER1,

                                ptraininfo->TCMS_VER2,

                                ptraininfo->TCMS_VER3,

                                ptraininfo->TCMS_VER4,

                                ptraininfo->SIXA_CPUVER,

                                ptraininfo->JC,

                                ptraininfo->TMIS_STATION_NO,

                                ptraininfo->PROVERSELFCHECK,

                                ptraininfo->COMP,

                                ptraininfo->LKJ_TYPE,

                                ptraininfo->CRK);

                        lprintf(disp.e,temp2);

                        cclog('e',temp2);

                    }

				num++;	

			}	

		}

	}	

	

	EXEC SQL COMMIT;



    /*  add by linw 20160226  */

//	time2 = time(NULL);

//	getDateTime(&yy, &mm, &dd, &hh, &mi, &ss);

//	//printf("更新TRAINLASTSTATUS表成功 %d,curtime=%d\n",num,curtime);

//	lprintf(disp.r,"%d-%2d-%2d %2d:%2d:%2d:总数目<%d>3G在线<%d>,无火回电<%d>,离线<%d>,失效<%d>\n",yy,mm,dd,hh,mi,ss,num,num1,num2,num3,num4);

}





void data_analysis()

{

	char chCmd;/*获取键盘字符*/

	time_t preunixtime;

	time_t nowunixtime;

    /*  add by linw 20160226  */

//	int g_year=0, g_month=0, g_day=0, g_hour=0, g_minute=0, g_second=0;



	int tmp_count= 0;                  /*从MQ中读出进行处理的记录数*/

	int indexPos=0;

	int length= 0;                   /*用来存放每包数据的长度变量*/

	int totallen;                   /*从MQ中读取数据的长度*/

	int buf_len,idx;

	int bStarting = 1;

	unsigned char rcv_data[409600];



	buf_len = sizeof(rcv_data);



    /* add by linw 20160226 */

//	preunixtime = nowunixtime = time(NULL);

    nowunixtime = time(NULL);

    preunixtime = nowunixtime;



	while(1)

	{

		tmp_count=0;

		indexPos=0;



		if(_kbhit())

		{

			chCmd = getchar();

            if(('q' == chCmd) || ('Q' == chCmd))

			{

				printf("The data analizer has exited...\n");

				break;

            } else

			{

				setDispSwitch(chCmd);

			}

		}



		if(Queue[0].LData[0] == MQHO_UNUSABLE_HOBJ)

		{

			if(bStarting)

			{

				bStarting=0;

            } else

			{

				//#ifdef UNIX_LINUX_SYS    
					//sleep(10); 
				//#else
					//_sleep(1000);   
					Sleep(1000);            

				//#endif               

		    

			}

			

			//连接队列管理器，打开4个队列

            if(0 == OpenQueue(&Queue[MQ_MANAGER]))

			{

                for(idx = 1; idx < 4; idx ++)

                    OpenQueue(&Queue[idx]);

			}

        } else

		{

			memset(rcv_data, 0, buf_len);

			totallen = 0;

            totallen = ReadQueue(&Queue[MQ_FROMJCMDQ], rcv_data, buf_len);

			if(totallen > 0)

			{	

				//#ifdef UNIX_LINUX_SYS		

				//MQSend(mongoqname, rcv_data, totallen, msgid);  

				//lprintf(disp.r,"发送数据总长度为%d字节\n",totallen);

                //#endif



                /* add by linw 20160226 */

//				gloab_3g_usednum = gloab_bd_usednum =gloab_fault_usednum =gloab_event_usednum =0;

                gloab_3g_usednum = 0;

                gloab_bd_usednum = 0;

                gloab_fault_usednum = 0;

                gloab_event_usednum = 0;



                while(indexPos < (totallen - 40))

				{

                    length = charToint(rcv_data + indexPos + 2, 2);

                    if(length < 40)

					{

						break;

                    } else

					{

                        parse_start(rcv_data + indexPos, length);

					}



					indexPos += length;

                    tmp_count ++;

				}



				if(checknum >= CHECKNUM)

				{

					checknum = 0;

					thread_conncheck();

                } else

				{

					checknum++;

				}



				if(disp.r)

				{

					printf("已处理<%d>条数据<%d>条实时,<%d>条北斗,<%d>条故障<%d>条事件\n\n",

						tmp_count,gloab_3g_usednum,gloab_bd_usednum,gloab_fault_usednum,gloab_event_usednum);

				}



				insertFAULTHandle();

				insertEVENTHandle();

				insert3GHandle();

				insertBDHandle();



				nowunixtime = time(NULL);

				if((nowunixtime - preunixtime) >= CHECKTIME)

				{

					updateTrainStatus();

					preunixtime = nowunixtime;

                }

//                if((nowunixtime - preunixtime) >= CHECKTIME_Boundary)

//                {

//                    c_map_clear(&boundary_map);

//                    getboundaryInfo();

//                }

            }

        }

	}



	exit(0);



	return;

}



int main(int argc, char *argv[])
{
    int year = 2016;
    int month = 3;
    int day = 2;
    int hour = 0;
    int min = 0;
    int sec = 0;

    int  sys_flag;							/*系统标志，1代表LAIS系统*/
    int  n;									/*子程序调用序号*/

	atexit(exithook);
    strcpy(cmd_sub_routine, "bjcmd2016");	/*数据处理子程序名称*/
	strcpy(configfile, "cmddp.cfg");		/*设置程序配置文件名称*/
	hash_init(&engineHash, 1);				/*故障，事件去重*/
    hash_init(&engineHash_3g, 1);				/*故障，事件去重*/
    hash_init(&engineHash_fault, 1);				/*故障，事件去重*/
    hash_init(&engineHash_event, 1);				/*故障，事件去重*/

	c_map_create(&person_map, int_comparer);/*司机相关信息*/
	c_map_create(&installtrain_map, int_comparer);/*未用*/
	c_map_create(&tcmsfault_map, int_comparer);
	c_map_create(&tcmsfault_map_v2, int_comparer);
	c_map_create(&_6afault_map, int_comparer);
	c_map_create(&ldpfault_map, int_comparer);
	c_map_create(&traininfo_map, int_comparer);
	c_map_create(&lkjenvent_map, int_comparer);
	c_map_create(&lineinfo_map, int_comparer);
    c_map_create(&boundary_map, int_comparer);	

	sys_flag = 1;	/*CMD系统标志*/		

	if (argc > 1) 
	{
		n = atoi(argv[1]);
    } else
	{
		n = 1;
	}

    memset(&disp, 0, sizeof(DISP));

    getDateTime(&year, &month, &day, &hour, &min, &sec);

    /* V251 过年期间运行程序
     * V252 增加北斗包头时间超过服务器时间600s时过滤报文的功能
     * V253 使能自检报文HISTORYQ推送功能
     * V254 使能日志功能、根据故障版本修改插表操作
     * V255 trainlaststatus表中增加版本信息
     * V256 增加局界判断模块
     */	

#ifdef UNIX_LINUX_DEBUG

	printf("\n\n\n\n");
	printf("\t************************************************************\n");
	printf("\t*                         欢  迎  使  用                   *\n");
	printf("\t*                   中国机车远程监测与诊断系统             *\n");
	printf("\t*                      TIMESTEN入库数据解析                *\n");
    printf("\t*                         version test1.0                  *\n");
    printf("\t*                     %04d-%02d-%02d %02d:%02d:%02d                  *\n",
              year,
              month,
              day,
              hour,
              min,
              sec);
	printf("\t************************************************************\n");
    printf("\n\n\n\n");
#endif
	
    _mkdir("./log");	/*数据处理程序日志文件存放在log目录*/
    chmod("./log", 0x0100 | 0x0080 | 0x0040);

    cclog('i', "\n\n\n\t\t\t\t Timesten入库数据解析程序启动。。。。。。\n");	

	/*系统设定环境变量：Export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK */
	setlocale(LC_ALL,"SIMPLIFIED CHINESE_CHINA.ZHS16GBK");

    sprintf(sub_routine, "%s-%d", cmd_sub_routine, n);
    init_read_configfile(0, configfile, sub_routine);    

   // InitMQ();

	/*deal_Socketdata(cmd_sub_routine,configfile);*/
	//init_oracle(sub_routine, configfile);

    cclog('i', "数据处理子进程成功启动!\n");

   // getbasicInfo();
	//data_analysis();

	return 0;
}

